{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "60cbf0b5-5cfe-4dac-89e0-364414a4b834",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "#1. Import the NUMPY package under the name np.\n",
    "\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "44dad7a9-e030-4125-a784-899e087bcd9c",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "NumPy Version: 1.24.3\n",
      "\n",
      "NumPy Configuration:\n",
      "blas_armpl_info:\n",
      "  NOT AVAILABLE\n",
      "blas_mkl_info:\n",
      "    libraries = ['mkl_rt']\n",
      "    library_dirs = ['C:/Users/matte/anaconda3\\\\Library\\\\lib']\n",
      "    define_macros = [('SCIPY_MKL_H', None), ('HAVE_CBLAS', None)]\n",
      "    include_dirs = ['C:/Users/matte/anaconda3\\\\Library\\\\include']\n",
      "blas_opt_info:\n",
      "    libraries = ['mkl_rt']\n",
      "    library_dirs = ['C:/Users/matte/anaconda3\\\\Library\\\\lib']\n",
      "    define_macros = [('SCIPY_MKL_H', None), ('HAVE_CBLAS', None)]\n",
      "    include_dirs = ['C:/Users/matte/anaconda3\\\\Library\\\\include']\n",
      "lapack_armpl_info:\n",
      "  NOT AVAILABLE\n",
      "lapack_mkl_info:\n",
      "    libraries = ['mkl_rt']\n",
      "    library_dirs = ['C:/Users/matte/anaconda3\\\\Library\\\\lib']\n",
      "    define_macros = [('SCIPY_MKL_H', None), ('HAVE_CBLAS', None)]\n",
      "    include_dirs = ['C:/Users/matte/anaconda3\\\\Library\\\\include']\n",
      "lapack_opt_info:\n",
      "    libraries = ['mkl_rt']\n",
      "    library_dirs = ['C:/Users/matte/anaconda3\\\\Library\\\\lib']\n",
      "    define_macros = [('SCIPY_MKL_H', None), ('HAVE_CBLAS', None)]\n",
      "    include_dirs = ['C:/Users/matte/anaconda3\\\\Library\\\\include']\n",
      "Supported SIMD extensions in this NumPy install:\n",
      "    baseline = SSE,SSE2,SSE3\n",
      "    found = SSSE3,SSE41,POPCNT,SSE42,AVX,F16C,FMA3,AVX2,AVX512F,AVX512CD,AVX512_SKX,AVX512_CLX,AVX512_CNL,AVX512_ICL\n",
      "    not found = \n",
      "None\n"
     ]
    }
   ],
   "source": [
    "#2. Print the NUMPY version and the configuration.\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "# Print NumPy version\n",
    "print(\"NumPy Version:\", np.__version__)\n",
    "\n",
    "# Print NumPy configuration\n",
    "print(\"\\nNumPy Configuration:\")\n",
    "print(np.show_config())\n",
    "# no se si esta bien lo busque en internet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "61e48708-3e1e-4634-8b45-dd5d015c8356",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[[0.30076302 0.14492792 0.7204832  0.89582259 0.90033651]\n",
      "  [0.76799952 0.15358303 0.99134126 0.74289955 0.16561446]\n",
      "  [0.73086679 0.58831684 0.71409461 0.85563745 0.54610859]]\n",
      "\n",
      " [[0.3261332  0.356931   0.57145584 0.1365852  0.17528714]\n",
      "  [0.45756382 0.79118479 0.3332444  0.99007678 0.49583801]\n",
      "  [0.26348627 0.04280755 0.28403572 0.88367302 0.54169228]]]\n"
     ]
    }
   ],
   "source": [
    "#3. Generate a 2x3x5 3-dimensional array with random values. Assign the array to variable \"a\"\n",
    "# Challenge: there are at least three easy ways that use numpy to generate random arrays. How many ways can you find?\n",
    "#4. Print a\n",
    "\n",
    "a = np.random.random((2, 3, 5))\n",
    "print(a)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "33b27056-b8e7-491e-8f47-7158a7d06732",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[[1. 1. 1.]\n",
      "  [1. 1. 1.]]\n",
      "\n",
      " [[1. 1. 1.]\n",
      "  [1. 1. 1.]]\n",
      "\n",
      " [[1. 1. 1.]\n",
      "  [1. 1. 1.]]\n",
      "\n",
      " [[1. 1. 1.]\n",
      "  [1. 1. 1.]]\n",
      "\n",
      " [[1. 1. 1.]\n",
      "  [1. 1. 1.]]]\n"
     ]
    }
   ],
   "source": [
    "#5. Create a 5x2x3 3-dimensional array with all values equaling 1.\n",
    "#Assign the array to variable \"b\"\n",
    "#6. Print b.\n",
    "\n",
    "b = np.ones((5, 2, 3))\n",
    "print(b)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5066b645-70c2-42c6-822d-f56947113470",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a y b son iguales? True\n"
     ]
    }
   ],
   "source": [
    "#7. Do a and b have the same size? How do you prove that in Python code?\n",
    "\n",
    "same_size = a.size == b.size\n",
    "\n",
    "# Print the result\n",
    "print(\"a y b son iguales?\", same_size)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "b2b2c067-916a-49b5-a489-a7ba071115b1",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Error: operands could not be broadcast together with shapes (2,3,5) (5,2,3) \n"
     ]
    }
   ],
   "source": [
    "#8. Are you able to add a and b? Why or why not?\n",
    "try:\n",
    "    result = a + b\n",
    "except ValueError as e:\n",
    "    print(f\"Error: {e}\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "905cdffe-c27b-40c9-b339-f949fd71f003",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "forma de a: (2, 3, 5)\n",
      "forma de b: (5, 2, 3)\n",
      "forma de c: (2, 3, 5)\n"
     ]
    }
   ],
   "source": [
    "#9. Transpose b so that it has the same structure of a (i.e. become a 2x3x5 array). Assign the transposed array to varialbe \"c\".\n",
    "\n",
    "c = b.transpose(1, 2, 0)\n",
    "\n",
    "print(\"forma de a:\", a.shape)\n",
    "print(\"forma de b:\", b.shape)\n",
    "print(\"forma de c:\", c.shape)\n",
    "\n",
    "# lo intente y funciono no entiendo porque, sera porque tienen la misma forma...."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "d0bd905b-2f94-47a0-924b-d712c797fe42",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "forma de a: (2, 3, 5)\n",
      "forma de c: (2, 3, 5)\n",
      "forma de d: (2, 3, 5)\n"
     ]
    }
   ],
   "source": [
    "#10. Try to add a and c. Now it should work. Assign the sum to varialbe \"d\". But why does it work now?\n",
    "\n",
    "d = a + c\n",
    "\n",
    "print(\"forma de a:\", a.shape)\n",
    "print(\"forma de c:\", c.shape)\n",
    "print(\"forma de d:\", d.shape)\n",
    "\n",
    "# lo intente y funciono no entiendo porque, sera porque tienen la misma forma....b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "446cdceb-181a-4a41-8f88-2a23a316e2ea",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[[0.30076302 0.14492792 0.7204832  0.89582259 0.90033651]\n",
      "  [0.76799952 0.15358303 0.99134126 0.74289955 0.16561446]\n",
      "  [0.73086679 0.58831684 0.71409461 0.85563745 0.54610859]]\n",
      "\n",
      " [[0.3261332  0.356931   0.57145584 0.1365852  0.17528714]\n",
      "  [0.45756382 0.79118479 0.3332444  0.99007678 0.49583801]\n",
      "  [0.26348627 0.04280755 0.28403572 0.88367302 0.54169228]]]\n"
     ]
    }
   ],
   "source": [
    "#11. Print a and d. Notice the difference and relation of the two array in terms of the values? Explain.\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "e915f22b-2dcc-44ce-961b-6dd875091025",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[[1.30076302 1.14492792 1.7204832  1.89582259 1.90033651]\n",
      "  [1.76799952 1.15358303 1.99134126 1.74289955 1.16561446]\n",
      "  [1.73086679 1.58831684 1.71409461 1.85563745 1.54610859]]\n",
      "\n",
      " [[1.3261332  1.356931   1.57145584 1.1365852  1.17528714]\n",
      "  [1.45756382 1.79118479 1.3332444  1.99007678 1.49583801]\n",
      "  [1.26348627 1.04280755 1.28403572 1.88367302 1.54169228]]]\n"
     ]
    }
   ],
   "source": [
    "print(d)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9adeeccb-72cf-4123-8a03-08fc31fecff6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# es lo mismo solo que con el 1. por delante, d es la suma de a y c pero... no sabria explicar mas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "ff52f1a2-4b61-4922-a5bf-c6ea69ad627a",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "forma de a: (2, 3, 5)\n",
      "forma de c: (2, 3, 5)\n",
      "forma de e: (2, 3, 5)\n"
     ]
    }
   ],
   "source": [
    "#12. Multiply a and c. Assign the result to e.\n",
    "e = a * c\n",
    "\n",
    "print(\"forma de a:\", a.shape)\n",
    "print(\"forma de c:\", c.shape)\n",
    "print(\"forma de e:\", e.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "2052d25c-eeaa-48e7-8cef-b743dd0a8390",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (4103887280.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[23], line 1\u001b[1;36m\u001b[0m\n\u001b[1;33m    Does e equal to a? Why #or why #not?\u001b[0m\n\u001b[1;37m         ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    " Does e equal to a? Why #or why #not?\n",
    "\n",
    "e == a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "85bcb827-da80-4a5a-bc11-87b759f764b0",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[[0.30076302 0.14492792 0.7204832  0.89582259 0.90033651]\n",
      "  [0.76799952 0.15358303 0.99134126 0.74289955 0.16561446]\n",
      "  [0.73086679 0.58831684 0.71409461 0.85563745 0.54610859]]\n",
      "\n",
      " [[0.3261332  0.356931   0.57145584 0.1365852  0.17528714]\n",
      "  [0.45756382 0.79118479 0.3332444  0.99007678 0.49583801]\n",
      "  [0.26348627 0.04280755 0.28403572 0.88367302 0.54169228]]]\n"
     ]
    }
   ],
   "source": [
    "print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "d45e990f-cb1f-4634-be96-7cda20bd0f66",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[[0.30076302 0.14492792 0.7204832  0.89582259 0.90033651]\n",
      "  [0.76799952 0.15358303 0.99134126 0.74289955 0.16561446]\n",
      "  [0.73086679 0.58831684 0.71409461 0.85563745 0.54610859]]\n",
      "\n",
      " [[0.3261332  0.356931   0.57145584 0.1365852  0.17528714]\n",
      "  [0.45756382 0.79118479 0.3332444  0.99007678 0.49583801]\n",
      "  [0.26348627 0.04280755 0.28403572 0.88367302 0.54169228]]]\n"
     ]
    }
   ],
   "source": [
    "print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "57cbf112-eecb-4576-8e21-b02549c3397c",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# son iguales pero nose como comprobarlo.....b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "52158a64-dead-4aab-8ae4-3bf4c7263498",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "el mayor valor en la matriz d: 1.9913412623611983\n",
      "el menor valor en la matriz d: 1.0428075460446626\n",
      "el valor medio en la matriz d: 1.5289596794334275\n"
     ]
    }
   ],
   "source": [
    "#14. Identify the max, min, and mean values in d. Assign those values to variables \"d_max\", \"d_min\", and \"d_mean\"\n",
    "\n",
    "d_max = np.max(d)\n",
    "d_min = np.min(d)\n",
    "d_mean = np.mean(d)\n",
    "\n",
    "# Print the results\n",
    "print(\"el mayor valor en la matriz d:\", d_max)\n",
    "print(\"el menor valor en la matriz d:\", d_min)\n",
    "print(\"el valor medio en la matriz d:\", d_mean)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "ee56a51a-18e0-4ee9-b4ff-370cccbbc0e2",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "la forma de f: (2, 3, 5)\n"
     ]
    }
   ],
   "source": [
    "#15. Now we want to label the values in d. First create an empty array \"f\" with the same shape (i.e. 2x3x5) as d using `np.empty`.\n",
    "\n",
    "shape_d = d.shape\n",
    "f = np.empty(shape_d)\n",
    "print(\"la forma de f:\", f.shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "75a325bb-6f4b-42ac-b02a-ed3daa3c0968",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "matriz f:\n",
      "[[[ 25.  25.  75.  75.  75.]\n",
      "  [ 75.  25. 100.  75.  25.]\n",
      "  [ 75.  75.  75.  75.  75.]]\n",
      "\n",
      " [[ 25.  25.  75.  25.  25.]\n",
      "  [ 25.  75.  25.  75.  25.]\n",
      "  [ 25.   0.  25.  75.  75.]]]\n"
     ]
    }
   ],
   "source": [
    "#16. Populate the values in f. For each value in d, if it's larger than d_min but smaller than d_mean, assign 25 to the corresponding value in f.\n",
    "#If a value equals to d_mean, assign 50 to the corresponding value in f.\n",
    "#Assign 0 to the corresponding value(s) in f for d_min in d.\n",
    "#Assign 100 to the corresponding value(s) in f for d_max in d.\n",
    "#In the end, f should have only the following values: 0, 25, 50, 75, and 100.\n",
    "#Note: you don't have to use Numpy in this question.\n",
    "\n",
    "# Define the conditions\n",
    "d_min_condition = (d == d_min)\n",
    "d_mean_condition = (d > d_min) & (d < d_mean)\n",
    "d_max_condition = (d == d_max)\n",
    "\n",
    "# Assign values to f based on conditions\n",
    "f[d_min_condition] = 0\n",
    "f[d_mean_condition] = 25\n",
    "f[d == d_mean] = 50\n",
    "f[(d_mean < d) & (d < d_max)] = 75\n",
    "f[d_max_condition] = 100\n",
    "\n",
    "# Print the resulting array f\n",
    "print(\"matriz f:\")\n",
    "print(f)\n",
    "# me ayude mucho con internet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "ec72565c-fa40-4720-8ea9-c7ea865a326c",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[[1.30076302 1.14492792 1.7204832  1.89582259 1.90033651]\n",
      "  [1.76799952 1.15358303 1.99134126 1.74289955 1.16561446]\n",
      "  [1.73086679 1.58831684 1.71409461 1.85563745 1.54610859]]\n",
      "\n",
      " [[1.3261332  1.356931   1.57145584 1.1365852  1.17528714]\n",
      "  [1.45756382 1.79118479 1.3332444  1.99007678 1.49583801]\n",
      "  [1.26348627 1.04280755 1.28403572 1.88367302 1.54169228]]]\n"
     ]
    }
   ],
   "source": [
    "#17. Print d and f. Do you have your expected f?\n",
    "print(d)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "3fdb615f-5d78-4aa0-bddb-9d4045e00eed",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[[ 25.  25.  75.  75.  75.]\n",
      "  [ 75.  25. 100.  75.  25.]\n",
      "  [ 75.  75.  75.  75.  75.]]\n",
      "\n",
      " [[ 25.  25.  75.  25.  25.]\n",
      "  [ 25.  75.  25.  75.  25.]\n",
      "  [ 25.   0.  25.  75.  75.]]]\n"
     ]
    }
   ],
   "source": [
    "print(f)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
